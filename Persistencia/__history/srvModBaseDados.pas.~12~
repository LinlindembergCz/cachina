unit srvModBaseDados;

interface

uses
  System.Classes, Data.DBXDataSnap, IndyPeerImpl, Data.DBXCommon,IniFiles, Forms,
  sysUtils, Data.FMTBcd, Data.DB, Data.SqlExpr, Datasnap.DBClient,
  Datasnap.DSConnect, Dialogs, Winapi.Windows, IPPeerClient, System.Win.ComObj,
  FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Error, FireDAC.UI.Intf,
  FireDAC.Phys.Intf, FireDAC.Stan.Def, FireDAC.Stan.Pool, FireDAC.Stan.Async,
  FireDAC.Phys, FireDAC.Phys.MSSQL, FireDAC.Phys.MSSQLDef,
  FireDAC.Phys.ODBCBase, FireDAC.Comp.Client, FireDAC.Stan.Param, FireDAC.DatS,
  FireDAC.DApt.Intf, FireDAC.DApt, FireDAC.Comp.DataSet, Datasnap.Provider;

type
  TDSServerModuleBaseDados = class(TDataModule)
    SQLConnection1: TSQLConnection;
    cdsConsulta: TClientDataSet;
    DSProviderConnectioneBase: TDSProviderConnection;
    ServerMethod_ExecSQL: TSqlServerMethod;
    FDConnection1: TFDConnection;
    FDPhysMSSQLDriverLink1: TFDPhysMSSQLDriverLink;
    dspConsulta: TDataSetProvider;
    FDQuery1: TFDQuery;
    procedure DataModuleCreate(Sender: TObject);
    function dspConsultaDataRequest(Sender: TObject;
      Input: OleVariant): OleVariant;
  private
    { Private declarations }
  public
    { Public declarations }
    function Conectar:boolean;
    function Desconectar:boolean;
    function getDataSet(strQry:string):TClientDataSet; overload;
    function execSql(strQry:string): boolean;
  end;

var
  DSServerModuleBaseDados: TDSServerModuleBaseDados;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}

{$R *.dfm}

function TDSServerModuleBaseDados.Conectar:boolean;
begin
  try
    //SQLConnection1.Connected := true;
    FDConnection1.Connected:= true;
    result := true;
  except
    result := false;
  end;
end;

procedure TDSServerModuleBaseDados.DataModuleCreate(Sender: TObject);
var
  arquivo:TIniFile;
  HostName: string;

  DataBase: string;
  Driver: string;
begin
  arquivo   := TIniFile.create(ExtractFilePath(application.ExeName)+'configuracao.ini');

  HostName  := arquivo.ReadString('Configuracao', 'HostName', HostName);
  DataBase  := arquivo.ReadString('Configuracao', 'DataBase', DataBase);
  Driver  := arquivo.ReadString('Configuracao', 'Driver', Driver);
  FDConnection1.Params.Values['HostName']:= HostName;
  FDConnection1.Params.Values['DataBase']:= DataBase;

  HostName  := arquivo.ReadString('Configuracao', 'HostName', HostName);
  SQLConnection1.Params.Values['HostName']:= HostName;
end;

function TDSServerModuleBaseDados.Desconectar:boolean;
begin

end;

function TDSServerModuleBaseDados.dspConsultaDataRequest(Sender: TObject;
  Input: OleVariant): OleVariant;
begin
   FDQuery1.SQL.Text:= Input;
end;

function TDSServerModuleBaseDados.getDataSet(strQry:string): TClientDataSet;
begin
  cdsConsulta.Close;
  cdsConsulta.datarequest(strQry);
  cdsConsulta.Open;

  result := cdsConsulta;
end;

function TDSServerModuleBaseDados.execSql(strQry:string): boolean;
Var
   msgErro:string;
begin
  result := false;
  try
    FDConnection1.ExecSQL(strQry);
    result := true;
  except
    on e: Exception do
    begin
      application.messagebox(Pchar('Não é possível excluir este registro, pois se encontra em uso!'+#13+#13+
      'Detalhes:  '+ E.Message), 'Atenção!', MB_ICONWARNING + mb_ok );
      raise;
    end;
  end;
end;

end.
