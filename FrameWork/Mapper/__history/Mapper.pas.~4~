unit Mapper;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, RTTI, Annotations, DB;

type
  TMapper = class
  private
  public
     class procedure SendComponentToObject(Form:TForm; Objeto: TObject);
     class procedure SendObjectToComponent(Form:TForm; Objeto: TObject);
     class procedure SendObjectToDataSet(DataSet: TDataSet; Objeto: TObject);
     class procedure SendDataSetToObject(DataSet: TDataSet; Objeto: TObject); static;
     class procedure SendDataSetToComponent(Form: TForm; DataSet: TDataSet); static;
     class procedure ParserSQLInsert(Objeto: TObject);
  end;


implementation

class procedure TMapper.ParserSQLInsert(Objeto: TObject);
var
   j  : Integer;
   Contexto : TRttiContext;
   TypObj   : TRttiType;
   Prop     : TRttiProperty;
   SQL: string;
begin
   Contexto := TRttiContext.Create;
   TypObj := Contexto.GetType(Objeto.ClassInfo);

   for Prop in TypObj.GetProperties do
   begin
      SQL := SQL + Prop.GetValue(Objeto).AsString+' , ';
   end;

   showmessage(SQL);
end;

      class procedure TMapper.SendComponentToObject(Form:TForm; Objeto: TObject);
var
    j  : Integer;
    Contexto : TRttiContext;
    TypObj   : TRttiType;
    Prop     : TRttiProperty;
    Atributo : TCustomAttribute;
begin
    Contexto := TRttiContext.Create;
    for j := 0 to Form.componentcount -1 do
    begin
       TypObj := Contexto.GetType(Objeto.ClassInfo);

       for Prop in TypObj.GetProperties do
       begin
          if Prop.Name = Form.components[j].Name  then
          begin
             Prop.SetValue( Objeto , TEdit(Form.components[j]).Text );
             TEdit(Form.components[j]).Text:= '';
          end;
       end;
    end;
end;

class procedure TMapper.SendObjectToComponent(Form:TForm; Objeto: TObject);
var
   j  : Integer;
   Contexto : TRttiContext;
   TypObj   : TRttiType;
   Prop     : TRttiProperty;
begin
   Contexto := TRttiContext.Create;
   for j := 0 to Form.componentcount -1 do
   begin
      TypObj := Contexto.GetType(Objeto.ClassInfo);
      for Prop in TypObj.GetProperties do
      begin
         if Prop.Name = Form.components[j].Name then
         begin
            TEdit(Form.components[j]).text := Prop.GetValue(Objeto).AsString;
         end;
      end;
   end;
end;



class procedure TMapper.SendObjectToDataSet(DataSet: TDataSet; Objeto: TObject);
var
   j  : Integer;
   Contexto : TRttiContext;
   TypObj   : TRttiType;
   Prop     : TRttiProperty;
begin
   Contexto := TRttiContext.Create;
   for j := 0 to DataSet.Fieldcount -1 do
   begin
      TypObj := Contexto.GetType(Objeto.ClassInfo);
      for Prop in TypObj.GetProperties do
      begin
         if Prop.Name = DataSet.Fields[j].fieldname then
         begin
            DataSet.FieldByName(Prop.Name).AsString  := Prop.GetValue(Objeto).AsString;
         end;
      end;
   end;
end;

class procedure TMapper.SendDataSetToComponent(Form: TForm; DataSet: TDataSet);
var
   j  : Integer;
   Contexto : TRttiContext;
   TypObj   : TRttiType;
   Prop     : TRttiProperty;
begin
   Contexto := TRttiContext.Create;
   for j := 0 to Form.componentcount -1 do
   begin
      TypObj := Contexto.GetType(DataSet.ClassInfo);
      if DataSet.FindField(Form.components[j].Name) <> nil then
      begin
         TEdit(Form.components[j]).text := DataSet.FieldByName(Form.components[j].Name).AsString;
      end;
   end;
end;

class procedure TMapper.SendDataSetToObject(DataSet:TDataSet; Objeto: TObject);
var
    j  : Integer;
    Contexto : TRttiContext;
    TypObj   : TRttiType;
    Prop     : TRttiProperty;
    Atributo : TCustomAttribute;
begin
    Contexto := TRttiContext.Create;
    for j := 0 to DataSet.fieldcount -1 do
    begin
       TypObj := Contexto.GetType(Objeto.ClassInfo);

       for Prop in TypObj.GetProperties do
       begin
          if Prop.Name = DataSet.fields[j].FieldName  then
          begin
             Prop.SetValue( Objeto , DataSet.FieldByName(Prop.Name ).AsString );
          end;
       end;
    end;
end;

end.
